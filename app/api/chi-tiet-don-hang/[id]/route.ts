import { NextResponse } from "next/server";
import { prisma } from "../../../lib/prisma";

// üì¶ L·∫•y danh s√°ch chi ti·∫øt ƒë∆°n h√†ng theo `donHangId`
export async function GET(req: Request, { params }: { params: { donHangId: string } }) {
    try {
      const { donHangId } = params;
  
      const chiTietList = await prisma.chiTietDonHang.findMany({
        where: { donHangId },
        include: { sanPham: true }, // L·∫•y lu√¥n th√¥ng tin s·∫£n ph·∫©m
      });
  
      return NextResponse.json(chiTietList);
    } catch (error) {
      console.error("L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:", error);
      return NextResponse.json({ error: "L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng" }, { status: 500 });
    }
  }
  
  // ‚úèÔ∏è C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ho·∫∑c gi√° c·ªßa chi ti·∫øt ƒë∆°n h√†ng
  export async function PUT(req: Request, { params }: { params: { id: string } }) {
    try {
      const { id } = params;
      const { quantity, price } = await req.json();
  
      // Ki·ªÉm tra xem chi ti·∫øt ƒë∆°n h√†ng c√≥ t·ªìn t·∫°i kh√¥ng
      const chiTiet = await prisma.chiTietDonHang.findUnique({
        where: { id },
      });
      if (!chiTiet) {
        return NextResponse.json({ error: "Chi ti·∫øt ƒë∆°n h√†ng kh√¥ng t·ªìn t·∫°i" }, { status: 404 });
      }
  
      // C·∫≠p nh·∫≠t d·ªØ li·ªáu
      const updatedChiTiet = await prisma.chiTietDonHang.update({
        where: { id },
        data: { quantity, price },
      });
  
      return NextResponse.json(updatedChiTiet);
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t chi ti·∫øt ƒë∆°n h√†ng:", error);
      return NextResponse.json({ error: "L·ªói khi c·∫≠p nh·∫≠t chi ti·∫øt ƒë∆°n h√†ng" }, { status: 500 });
    }
  }
  
  // ‚ùå X√≥a m·ªôt m·ª•c chi ti·∫øt ƒë∆°n h√†ng
  export async function DELETE(req: Request, { params }: { params: { id: string } }) {
    try {
      const { id } = params;
  
      // Ki·ªÉm tra xem chi ti·∫øt ƒë∆°n h√†ng c√≥ t·ªìn t·∫°i kh√¥ng
      const chiTiet = await prisma.chiTietDonHang.findUnique({
        where: { id },
      });
      if (!chiTiet) {
        return NextResponse.json({ error: "Chi ti·∫øt ƒë∆°n h√†ng kh√¥ng t·ªìn t·∫°i" }, { status: 404 });
      }
  
      // X√≥a m·ª•c chi ti·∫øt ƒë∆°n h√†ng
      await prisma.chiTietDonHang.delete({ where: { id } });
  
      return NextResponse.json({ message: "X√≥a th√†nh c√¥ng" });
    } catch (error) {
      console.error("L·ªói khi x√≥a chi ti·∫øt ƒë∆°n h√†ng:", error);
      return NextResponse.json({ error: "L·ªói khi x√≥a chi ti·∫øt ƒë∆°n h√†ng" }, { status: 500 });
    }
  }