generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  fullName      String?
  role          Role           @default(CUSTOMER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  avatar        String?
  firebaseId    String         @unique
  customDesigns CustomDesign[] 
  customer      Customer?
}

model Customer {
  id           String               @id @default(uuid())
  userId       String               @unique
  phone        String?
  address      String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @default(now()) @updatedAt
  appointments Appointment[]
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  measurements CustomerMeasurement?
  orders       Order[]
  shoppingCart ShoppingCart?
}

model CustomerMeasurement {
  id                String   @id @default(uuid())
  customerId        String   @unique
  chestSize         Float?
  neckSize          Float?
  bustSize          Float?
  waistSize         Float?
  hipSize           Float?
  shoulderWidth     Float?
  waistLength       Float?
  armLength         Float?
  armCircumference  Float?
  pantLength        Float?
  calfCircumference Float?
  headCircumference Float?
  createdAt         DateTime @default(now())
  customer          Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model ShoppingCart {
  id         String     @id @default(uuid())
  customerId String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  cartItems  CartItem[]
  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model CartItem {
  id             String        @id @default(uuid())
  shoppingCartId String
  productId      String
  quantity       Int
  price          Float
  product        CustomProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  shoppingCart   ShoppingCart  @relation(fields: [shoppingCartId], references: [id], onDelete: Cascade)
}

model Appointment {
  id              String            @id @default(uuid())
  customerId      String?
  appointmentDate DateTime
  notes           String?
  status          AppointmentStatus
  createdAt       DateTime          @default(now())
  sdt             String?
  guestName_      String?           @default("visitors") @map("guestName ")
  customer        Customer?         @relation(fields: [customerId], references: [id])
}

model Order {
  id               String           @id @default(uuid())
  customerId       String
  orderDate        DateTime         @default(now())
  status           OrderStatus
  totalAmount      Float
  createdAt        DateTime         @default(now())
  shippingAddress  String
  notes            String?
  shippingFee      Float?
  paymentMethod    String
  measurementId    String?
  paymentCompleted Boolean
  updatedAt        DateTime         @default(now()) @updatedAt
  voucherCode      String?
  customer         Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  voucher          Voucher?         @relation(fields: [voucherCode], references: [code])
  orderDetails     OrderDetail[]
  payment          Payment?
  paymentReceipt   PaymentReceipt?
  shippingInfo     ShippingInfo?
  shippingReceipt  ShippingReceipt?
}

model OrderDetail {
  id        String        @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime      @default(now())
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   CustomProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String        @unique
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus
  transactionId String?       @unique
  createdAt     DateTime      @default(now())
  paymentDate   DateTime      @default(now())
  paymentType   PaymentType
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model PaymentReceipt {
  id            String        @id @default(uuid())
  orderId       String        @unique
  paymentMethod PaymentMethod
  paymentType   PaymentType
  amount        Float
  isRefunded    Boolean       @default(false)
  refundAmount  Float?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model ShippingInfo {
  id                String         @id @default(uuid())
  orderId           String         @unique
  shippingAddress   String
  shippingMethod    String?
  trackingNumber    String?
  shippingStatus    ShippingStatus
  shippingFee       Float
  createdAt         DateTime       @default(now())
  estimatedDelivery DateTime?
  order             Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model ShippingReceipt {
  id             String         @id @default(uuid())
  orderId        String         @unique
  shippingStatus ShippingStatus
  trackingCode   String?
  estimatedDate  DateTime?
  deliveryDate   DateTime?
  isReturned     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Voucher {
  id         String    @id @default(uuid())
  code       String    @unique
  discount   Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  categoryId String?
  orders     Order[]
  category   Category? @relation(fields: [categoryId], references: [id])
}

model CustomProduct {
  id                  String         @id @default(uuid())
  name                String
  description         String?
  detailedDescription String?
  price               Float
  imageUrl            String?
  createdAt           DateTime       @default(now())
  size                String?
  color               String?
  customAttributes    Json?
  isAvailable         Boolean
  productionTime      String?
  careInstructions    String?
  categoryId          String
  rating              Float?
  reviewCount         Int?
  cartItems           CartItem[]
  category            Category       @relation(fields: [categoryId], references: [id])
  fabricDetails       FabricDetail[]
  orderDetails        OrderDetail[]
}

model Category {
  id             String          @id @default(uuid())
  name           String
  imageUrl       String          @default("aaa")
  categorySlug   String?         @unique @map("category_slug")
  customProducts CustomProduct[]
  vouchers       Voucher[]
}

model CustomDesign {
  id          String   @id @default(uuid())
  createdBy   String?
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [createdBy], references: [id])
}

model FabricDetail {
  id        String        @id @default(uuid())
  productId String
  fabricId  String
  quantity  Float
  createdAt DateTime      @default(now())
  fabric    Fabric        @relation(fields: [fabricId], references: [id], onDelete: Cascade)
  product   CustomProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Fabric {
  id            String         @id @default(uuid())
  name          String
  description   String?
  pricePerMeter Float
  createdAt     DateTime       @default(now())
  fabricDetails FabricDetail[]
  warehouses    Warehouse[]
}

model Warehouse {
  id        String   @id @default(uuid())
  fabricId  String
  quantity  Float
  location  String?
  createdAt DateTime @default(now())
  fabric    Fabric   @relation(fields: [fabricId], references: [id], onDelete: Cascade)
}

enum Role {
  CUSTOMER
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  ZALOPAY
  COD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentType {
  FULL_PAYMENT
  DEPOSIT
}

enum ShippingStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  FAILED
}
